/* * Copyright 2021 Shulie Technology, Co.Ltd * Email: shulie@shulie.io * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * See the License for the specific language governing permissions and * limitations under the License. */package io.shulie.surge.data.deploy.pradar.digester;import com.google.common.base.Joiner;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.google.inject.Inject;import com.google.inject.Singleton;import com.google.inject.name.Named;import com.pamirs.pradar.log.parser.constant.TenantConstants;import com.pamirs.pradar.log.parser.monitor.MonitorBased;import io.shulie.surge.data.common.utils.FormatUtils;import io.shulie.surge.data.runtime.common.remote.DefaultValue;import io.shulie.surge.data.runtime.common.remote.Remote;import io.shulie.surge.data.runtime.common.utils.ApiProcessor;import io.shulie.surge.data.runtime.digest.DataDigester;import io.shulie.surge.data.runtime.digest.DigestContext;import io.shulie.surge.data.sink.clickhouse.ClickHouseShardSupport;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.ArrayList;import java.util.List;import java.util.Map;/** * @author xingchen * @className BaseDataDigester * @package com.pamirs.pradar.digest * @description 基础信息处理digester */@Singletonpublic class BaseDataDigester implements DataDigester<MonitorBased> {    private static final Logger logger = LoggerFactory.getLogger(BaseDataDigester.class);    @Inject    @DefaultValue("false")    @Named("/pradar/config/rt/monitroDisable")    private Remote<Boolean> monitroDisable;    @Inject    private ClickHouseShardSupport clickHouseShardSupport;    @Override    public void digest(DigestContext<MonitorBased> context) {        try {            if (monitroDisable.get()) {                return;            }            MonitorBased monitorBased = context.getContent();            if (monitorBased == null) {                logger.warn("parse monitorBased is null " + context.getContent());                return;            }            //对于1.2以及之前的老版本探针,没有租户相关字段,根据应用名称获取租户配置,没有设默认值            if (StringUtils.isBlank(monitorBased.getUserAppKey()) || TenantConstants.DEFAULT_USER_APP_KEY.equals(monitorBased.getUserAppKey())) {                monitorBased.setUserAppKey(ApiProcessor.getTenantConfigByAppName(monitorBased.getAppName()).get("tenantAppKey"));            }            if (StringUtils.isBlank(monitorBased.getEnvCode())) {                monitorBased.setEnvCode(ApiProcessor.getTenantConfigByAppName(monitorBased.getAppName()).get("envCode"));            }            String tableName = clickHouseShardSupport.isCluster() ? "t_app_base_data" : "t_app_base_data_all";            /**             * 解析数据处理             */            clickHouseShardSupport.insert(this.getMap(monitorBased), monitorBased.getHostIp(), tableName);        } catch (Throwable e) {            logger.error("fail to write clickhouse, log: " + context.getContent() + ", error:" + e.getMessage());        }    }    private Map<String, Object> getMap(MonitorBased monitorBased) {        Map<String, Object> fields = Maps.newHashMap();        fields.put("app_ip", monitorBased.getHostIp());        fields.put("app_name", monitorBased.getAppName());        fields.put("cpu_rate", monitorBased.getCpuUsage());        fields.put("cpu_load", monitorBased.getCpuLoad1());        fields.put("mem_rate", monitorBased.getMemoryUsage());        fields.put("iowait", monitorBased.getIoWait());        fields.put("net_bandwidth_rate", monitorBased.getNetworkUsage());        fields.put("net_bandwidth", monitorBased.getNetworkSpeed());        fields.put("cpu_cores", monitorBased.getCpuNum());        fields.put("disk", monitorBased.getTotalDisk());        fields.put("memory", monitorBased.getTotalMemory());        fields.put("is_container_flag", monitorBased.getIsContainerFlag());        fields.put("agent_id", monitorBased.getAgentId());        fields.put("tenant_app_key", monitorBased.getUserAppKey());        fields.put("env_code", monitorBased.getEnvCode());        fields.put("user_id", StringUtils.isBlank(monitorBased.getUserId()) ? TenantConstants.DEFAULT_USERID : monitorBased.getUserId());        long time = monitorBased.getTimestamp() * 1000;        // 加一个时间字符。便于查看日志        fields.put("log_time", FormatUtils.toDateTimeSecondString(time));        fields.put("time", System.currentTimeMillis());        fields.put("young_gc_count", monitorBased.getYoungGcCount());        fields.put("young_gc_cost", monitorBased.getYoungGcCost());        fields.put("full_gc_count", monitorBased.getOldGcCount());        fields.put("full_gc_cost", monitorBased.getOldGcCost());        return fields;    }    @Override    public void stop() {        try {            clickHouseShardSupport.stop();        } catch (Throwable e) {            logger.error("close fail");        }    }    @Override    public int threadCount() {        return 1;    }}