<?xml version="1.0"?>
<configuration debug="false">
    <property name="LOG_NAME" value="service"/>
    <property name="LOG_HOME" value="./logs/"/>

    <!-- 按照每天生成日志文件 -->
    <appender name="FILE_ERROR"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>Error</level>
        </filter>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/error/error.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
            <maxFileSize>5MB</maxFileSize>
            <totalSizeCap>50MB</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- sys log file setting -->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/${LOG_NAME}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <FileNamePattern>
                ${LOG_HOME}/${LOG_NAME}.%i.log
            </FileNamePattern>
            <!-- 生成日志序号。maxIndex:只会生成4个日志文件 -->
            <MinIndex>1</MinIndex>
            <MaxIndex>4</MaxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!--使用triggeringPolicy来截断日志, 例如: 我们一个文件只要50MB, 大于50MB则进入下一个序号的日志-->
            <MaxFileSize>50MB</MaxFileSize>
        </triggeringPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%thread] [%logger{36}] %L [%X{traceId}] - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <appender name="AGENT_COMMAND_DISTRIBUTION" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/agentCommandDistribution.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <FileNamePattern>
                ${LOG_HOME}/agentCommandDistribution.%i.log
            </FileNamePattern>
            <!-- 生成日志序号。maxIndex:只会生成4个日志文件 -->
            <MinIndex>1</MinIndex>
            <MaxIndex>4</MaxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!--使用triggeringPolicy来截断日志, 例如: 我们一个文件只要50MB, 大于50MB则进入下一个序号的日志-->
            <MaxFileSize>50MB</MaxFileSize>
        </triggeringPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%thread] [%logger{36}] %L [%X{traceId}] - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
        </filter>
    </appender>

    <logger name="AGENT_COMMAND_DISTRIBUTION" level="INFO" additivity="false">
        <appender-ref ref="AGENT_COMMAND_DISTRIBUTION"/>
    </logger>

    <appender name="AGENT_COMMAND_REPORT" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/agentCommandReport.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <FileNamePattern>
                ${LOG_HOME}/agentCommandReport.%i.log
            </FileNamePattern>
            <!-- 生成日志序号。maxIndex:只会生成4个日志文件 -->
            <MinIndex>1</MinIndex>
            <MaxIndex>4</MaxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!--使用triggeringPolicy来截断日志, 例如: 我们一个文件只要50MB, 大于50MB则进入下一个序号的日志-->
            <MaxFileSize>50MB</MaxFileSize>
        </triggeringPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%thread] [%logger{36}] %L [%X{traceId}] - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
        </filter>
    </appender>

    <logger name="AGENT_COMMAND_REPORT" level="INFO" additivity="false">
        <appender-ref ref="AGENT_COMMAND_REPORT"/>
    </logger>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%thread] [%logger{36}] %L [%X{traceId}] - %msg%n</pattern>
        </encoder>
    </appender>

    <root level="INFO">
        <appender-ref ref="file"/>
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE_ERROR"/>
    </root>

    <!-- mybatis日志打印-->
    <logger name="org.apache.ibatis" level="WARN"/>
    <logger name="java.sql" level="WARN"/>
    <!-- job -->
    <property name="JOB_LOG_NAME" value="service_job"/>
    <property name="JOB_LOG_HOME" value="./logs/job/"/>
    <appender name="job" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${JOB_LOG_HOME}/${JOB_LOG_NAME}.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <FileNamePattern>
                ${JOB_LOG_HOME}/${JOB_LOG_NAME}.%i.log
            </FileNamePattern>
            <!-- 生成日志序号。maxIndex:只会生成4个日志文件 -->
            <MinIndex>1</MinIndex>
            <MaxIndex>4</MaxIndex>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!--使用triggeringPolicy来截断日志, 例如: 我们一个文件只要50MB, 大于50MB则进入下一个序号的日志-->
            <MaxFileSize>50MB</MaxFileSize>
        </triggeringPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%thread] [%logger{36}] %L [%X{traceId}] - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
        </filter>
    </appender>
    <logger name="io.shulie.takin.job" level="INFO" additivity="false">
        <appender-ref ref="job"/>
    </logger>>
</configuration>
